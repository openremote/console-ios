// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ORConfigChannelProtocol.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var result: Response.ResponseResult {
    get {return _result ?? Response.ResponseResult()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var body: Response.OneOf_Body? = nil

  var deviceInfo: Response.DeviceInfo {
    get {
      if case .deviceInfo(let v)? = body {return v}
      return Response.DeviceInfo()
    }
    set {body = .deviceInfo(newValue)}
  }

  var backendConnectionStatus: Response.BackendConnectionStatus {
    get {
      if case .backendConnectionStatus(let v)? = body {return v}
      return Response.BackendConnectionStatus()
    }
    set {body = .backendConnectionStatus(newValue)}
  }

  var openRemoteConfig: Response.OpenRemoteConfig {
    get {
      if case .openRemoteConfig(let v)? = body {return v}
      return Response.OpenRemoteConfig()
    }
    set {body = .openRemoteConfig(newValue)}
  }

  var exitProvisioning: Response.ExitProvisioning {
    get {
      if case .exitProvisioning(let v)? = body {return v}
      return Response.ExitProvisioning()
    }
    set {body = .exitProvisioning(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Body: Equatable, Sendable {
    case deviceInfo(Response.DeviceInfo)
    case backendConnectionStatus(Response.BackendConnectionStatus)
    case openRemoteConfig(Response.OpenRemoteConfig)
    case exitProvisioning(Response.ExitProvisioning)

  }

  struct ResponseResult: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var result: Response.ResponseResult.Result = .success

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Result: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case success // = 0
      case requestUnknown // = 1
      case internalError // = 2
      case argumentError // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .success
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .success
        case 1: self = .requestUnknown
        case 2: self = .internalError
        case 3: self = .argumentError
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .success: return 0
        case .requestUnknown: return 1
        case .internalError: return 2
        case .argumentError: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Response.ResponseResult.Result] = [
        .success,
        .requestUnknown,
        .internalError,
        .argumentError,
      ]

    }

    init() {}
  }

  struct OpenRemoteConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: Response.OpenRemoteConfig.Status = .success

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Status: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case success // = 0
      case fail // = 1
      case UNRECOGNIZED(Int)

      init() {
        self = .success
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .success
        case 1: self = .fail
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .success: return 0
        case .fail: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Response.OpenRemoteConfig.Status] = [
        .success,
        .fail,
      ]

    }

    init() {}
  }

  struct BackendConnectionStatus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: Response.BackendConnectionStatus.Status = .disconnected

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Status: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int
      case disconnected // = 0
      case connecting // = 1
      case connected // = 2
      case failed // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .disconnected
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .disconnected
        case 1: self = .connecting
        case 2: self = .connected
        case 3: self = .failed
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .disconnected: return 0
        case .connecting: return 1
        case .connected: return 2
        case .failed: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

      // The compiler won't synthesize support with the UNRECOGNIZED case.
      static let allCases: [Response.BackendConnectionStatus.Status] = [
        .disconnected,
        .connecting,
        .connected,
        .failed,
      ]

    }

    init() {}
  }

  struct DeviceInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var deviceID: String = String()

    var modelName: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ExitProvisioning: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _result: Response.ResponseResult? = nil
}

struct Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var body: Request.OneOf_Body? = nil

  var deviceInfo: Request.DeviceInfo {
    get {
      if case .deviceInfo(let v)? = body {return v}
      return Request.DeviceInfo()
    }
    set {body = .deviceInfo(newValue)}
  }

  var backendConnectionStatus: Request.BackendConnectionStatus {
    get {
      if case .backendConnectionStatus(let v)? = body {return v}
      return Request.BackendConnectionStatus()
    }
    set {body = .backendConnectionStatus(newValue)}
  }

  var openRemoteConfig: Request.OpenRemoteConfig {
    get {
      if case .openRemoteConfig(let v)? = body {return v}
      return Request.OpenRemoteConfig()
    }
    set {body = .openRemoteConfig(newValue)}
  }

  var exitProvisioning: Request.ExitProvisioning {
    get {
      if case .exitProvisioning(let v)? = body {return v}
      return Request.ExitProvisioning()
    }
    set {body = .exitProvisioning(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Body: Equatable, Sendable {
    case deviceInfo(Request.DeviceInfo)
    case backendConnectionStatus(Request.BackendConnectionStatus)
    case openRemoteConfig(Request.OpenRemoteConfig)
    case exitProvisioning(Request.ExitProvisioning)

  }

  struct DeviceInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct BackendConnectionStatus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct OpenRemoteConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mqttBrokerURL: String = String()

    var user: String = String()

    var mqttPassword: String = String()

    var realm: String = String()

    var assetID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ExitProvisioning: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "result"),
    6: .standard(proto: "device_info"),
    7: .standard(proto: "backend_connection_status"),
    8: .standard(proto: "open_remote_config"),
    9: .standard(proto: "exit_provisioning"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 6: try {
        var v: Response.DeviceInfo?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .deviceInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .deviceInfo(v)
        }
      }()
      case 7: try {
        var v: Response.BackendConnectionStatus?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .backendConnectionStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .backendConnectionStatus(v)
        }
      }()
      case 8: try {
        var v: Response.OpenRemoteConfig?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .openRemoteConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .openRemoteConfig(v)
        }
      }()
      case 9: try {
        var v: Response.ExitProvisioning?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .exitProvisioning(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .exitProvisioning(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    switch self.body {
    case .deviceInfo?: try {
      guard case .deviceInfo(let v)? = self.body else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .backendConnectionStatus?: try {
      guard case .backendConnectionStatus(let v)? = self.body else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .openRemoteConfig?: try {
      guard case .openRemoteConfig(let v)? = self.body else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .exitProvisioning?: try {
      guard case .exitProvisioning(let v)? = self.body else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Response, rhs: Response) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._result != rhs._result {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Response.ResponseResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Response.protoMessageName + ".ResponseResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .success {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Response.ResponseResult, rhs: Response.ResponseResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Response.ResponseResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    1: .same(proto: "REQUEST_UNKNOWN"),
    2: .same(proto: "INTERNAL_ERROR"),
    3: .same(proto: "ARGUMENT_ERROR"),
  ]
}

extension Response.OpenRemoteConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Response.protoMessageName + ".OpenRemoteConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Response.OpenRemoteConfig, rhs: Response.OpenRemoteConfig) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Response.OpenRemoteConfig.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    1: .same(proto: "FAIL"),
  ]
}

extension Response.BackendConnectionStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Response.protoMessageName + ".BackendConnectionStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .disconnected {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Response.BackendConnectionStatus, rhs: Response.BackendConnectionStatus) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Response.BackendConnectionStatus.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DISCONNECTED"),
    1: .same(proto: "CONNECTING"),
    2: .same(proto: "CONNECTED"),
    3: .same(proto: "FAILED"),
  ]
}

extension Response.DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Response.protoMessageName + ".DeviceInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    3: .standard(proto: "model_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.modelName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.modelName.isEmpty {
      try visitor.visitSingularStringField(value: self.modelName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Response.DeviceInfo, rhs: Response.DeviceInfo) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.modelName != rhs.modelName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Response.ExitProvisioning: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Response.protoMessageName + ".ExitProvisioning"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Response.ExitProvisioning, rhs: Response.ExitProvisioning) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    6: .standard(proto: "device_info"),
    7: .standard(proto: "backend_connection_status"),
    8: .standard(proto: "open_remote_config"),
    9: .standard(proto: "exit_provisioning"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 6: try {
        var v: Request.DeviceInfo?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .deviceInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .deviceInfo(v)
        }
      }()
      case 7: try {
        var v: Request.BackendConnectionStatus?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .backendConnectionStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .backendConnectionStatus(v)
        }
      }()
      case 8: try {
        var v: Request.OpenRemoteConfig?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .openRemoteConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .openRemoteConfig(v)
        }
      }()
      case 9: try {
        var v: Request.ExitProvisioning?
        var hadOneofValue = false
        if let current = self.body {
          hadOneofValue = true
          if case .exitProvisioning(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.body = .exitProvisioning(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    switch self.body {
    case .deviceInfo?: try {
      guard case .deviceInfo(let v)? = self.body else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .backendConnectionStatus?: try {
      guard case .backendConnectionStatus(let v)? = self.body else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .openRemoteConfig?: try {
      guard case .openRemoteConfig(let v)? = self.body else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .exitProvisioning?: try {
      guard case .exitProvisioning(let v)? = self.body else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Request, rhs: Request) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.body != rhs.body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Request.DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Request.protoMessageName + ".DeviceInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Request.DeviceInfo, rhs: Request.DeviceInfo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Request.BackendConnectionStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Request.protoMessageName + ".BackendConnectionStatus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Request.BackendConnectionStatus, rhs: Request.BackendConnectionStatus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Request.OpenRemoteConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Request.protoMessageName + ".OpenRemoteConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mqtt_broker_url"),
    2: .same(proto: "user"),
    3: .standard(proto: "mqtt_password"),
    4: .same(proto: "realm"),
    5: .standard(proto: "asset_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mqttBrokerURL) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.user) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mqttPassword) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.realm) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.assetID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mqttBrokerURL.isEmpty {
      try visitor.visitSingularStringField(value: self.mqttBrokerURL, fieldNumber: 1)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 2)
    }
    if !self.mqttPassword.isEmpty {
      try visitor.visitSingularStringField(value: self.mqttPassword, fieldNumber: 3)
    }
    if !self.realm.isEmpty {
      try visitor.visitSingularStringField(value: self.realm, fieldNumber: 4)
    }
    if !self.assetID.isEmpty {
      try visitor.visitSingularStringField(value: self.assetID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Request.OpenRemoteConfig, rhs: Request.OpenRemoteConfig) -> Bool {
    if lhs.mqttBrokerURL != rhs.mqttBrokerURL {return false}
    if lhs.user != rhs.user {return false}
    if lhs.mqttPassword != rhs.mqttPassword {return false}
    if lhs.realm != rhs.realm {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Request.ExitProvisioning: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Request.protoMessageName + ".ExitProvisioning"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Request.ExitProvisioning, rhs: Request.ExitProvisioning) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
